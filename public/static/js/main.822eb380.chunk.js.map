{"version":3,"sources":["components/NavBar.js","components/PlaceHolder.js","components/TodoButtons.js","components/TodoCard.js","pages/Completed.js","components/EditTodoForm.js","pages/EditTodo.js","components/NewTodoForm.js","pages/NewTodo.js","pages/Todos.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","Nav","className","defaultActiveKey","as","Item","Link","aria-label","aria-hidden","role","to","PlaceHolder","message","buttonText","route","type","Card","Body","Title","Text","Button","variant","TodoButtons","todo","fetchTodos","handleComplete","todoId","fetch","bff","headers","method","body","JSON","stringify","completed","then","ButtonGroup","onClick","id","TodoCard","bg","key","text","Header","name","description","Footer","moment","created_at","format","Completed","useState","todos","setTodos","res","json","data","catch","console","log","useEffect","Container","length","map","EditTodoForm","params","useParams","redirect","setRedirect","req","setReq","handleOnChange","e","target","value","err","Form","onSubmit","preventDefault","Group","controlId","Label","Control","onChange","required","rows","block","EditTodo","NewTodoForm","placeholder","NewTodo","Todos","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.822eb380.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { Nav } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\nconst NavBar = () => {\n    return (\n        <Nav className=\"nav-bar\" defaultActiveKey=\"/\" as=\"ul\">\n            <div className=\"nav-links-left\" >\n                <Nav.Item as=\"li\">\n                    <Nav.Link>\n                        <span aria-label=\"Check\" aria-hidden={true} role=\"img\">âœ…</span>\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item as=\"li\">\n                    <Nav.Link as={Link} to=\"/\">Todos</Nav.Link>\n                </Nav.Item>\n                <Nav.Item as=\"li\">\n                    <Nav.Link as={Link} to=\"/completed\">Completed</Nav.Link>\n                </Nav.Item>\n            </div>\n            <Nav.Item as=\"li\">\n                <Nav.Link as={Link} to=\"/new\">New Todo</Nav.Link>\n            </Nav.Item>\n        </Nav>\n    )\n}\n\nexport default NavBar","\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Card, Button } from 'react-bootstrap'\n\nconst PlaceHolder = ({ type }) => {\n    let message\n    let buttonText\n    let route\n\n    if (type === 'completed') {\n        buttonText = 'Check Your Todos'\n        message = 'None of your todos are completed. You need to get to work!'\n        route = '/todos'\n    } else {\n        buttonText = 'New Todo'\n        message = 'You haven\\'t created any todos. Get yourself organized!'\n        route = '/new'\n    }\n\n\n    return (\n        <Card className=\"text-center\">\n            <Card.Body>\n                <Card.Title>\n                    <span aria-label=\"Check\" aria-hidden={true} role=\"img\">ðŸ¤”</span>\n                </Card.Title>\n                <Card.Text>{message}</Card.Text>\n                <Button as={Link} to={route} variant=\"primary\">{buttonText}</Button>\n            </Card.Body>\n        </Card>\n    )\n\n}\n\nexport default PlaceHolder","\nimport React from 'react'\nimport { Link } from 'react-router-dom'\nimport { ButtonGroup, Button } from 'react-bootstrap'\n\nimport { bff } from '../config'\n\nconst TodoButtons = ({ todo, fetchTodos }) => {\n    const handleComplete = (todoId) => {\n        return fetch(bff + '/todos/' + todoId, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: 'PUT',\n            body: JSON.stringify({ completed: !todo.completed })\n        })\n            .then(fetchTodos)\n    }\n\n    const handleDelete = (todoId) => {\n        return fetch(bff + '/todos/' + todoId, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: 'DELETE'\n        })\n            .then(fetchTodos)\n    }\n\n    return (\n        <ButtonGroup className=\"todo-buttons\">\n            {!todo.completed\n                ? (\n                    <>\n                        <div>\n                            <Button\n                                className=\"complete-todo-button\"\n                                onClick={() => handleComplete(todo.id)}\n                                variant=\"outline-primary\">\n                                Complete\n                            </Button>\n                        </div>\n                        <div className=\"right-todo-buttons\">\n                            <Button\n                                as={Link}\n                                to={\"/\" + todo.id + \"/edit\"}\n                                variant=\"outline-success\">\n                                Edit\n                            </Button>\n                            <Button\n                                onClick={() => handleDelete(todo.id)}\n                                variant=\"outline-danger\">\n                                Delete\n                            </Button>\n                        </div >\n                    </>\n                )\n                : (\n                    <div>\n                        <Button\n                            className=\"complete-todo-button\"\n                            onClick={() => handleComplete(todo.id)}\n                            variant=\"outline-primary\">\n                            Put Back\n                        </Button>\n                    </div>\n                )}\n        </ButtonGroup >\n    )\n}\n\nexport default TodoButtons\n","\nimport React from 'react'\nimport { Card } from 'react-bootstrap'\nimport moment from 'moment'\n\nimport TodoButtons from '../components/TodoButtons'\n\nconst TodoCard = ({ fetchTodos, todo }) => {\n    return (\n        <>\n            <Card\n                bg=\"light\"\n                key={todo.id}\n                text=\"dark\"\n            >\n                <Card.Header>\n                    <TodoButtons todo={todo} fetchTodos={fetchTodos} />\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title>{todo.name}</Card.Title>\n                    <Card.Text>{todo.description}</Card.Text>\n                </Card.Body>\n                <Card.Footer>\n                    {moment(todo.created_at).format('LLLL')}\n                </Card.Footer>\n            </Card>\n            <br />\n        </>\n    )\n}\n\nexport default TodoCard","\nimport React, { useState, useEffect } from 'react'\nimport { Container } from 'react-bootstrap'\n\nimport NavBar from '../components/NavBar'\nimport PlaceHolder from '../components/PlaceHolder'\nimport TodoCard from '../components/TodoCard'\n\nimport { bff } from '../config'\n\nconst Completed = () => {\n    const [todos, setTodos] = useState([])\n\n    const fetchTodos = () => {\n        fetch(bff + '/todos?completed=true', {\n            'Access-Control-Allow-Origin': '*'\n        })\n            .then(res => res.json())\n            .then(res => setTodos(res.data))\n            .catch(res => console.log(res))\n    }\n\n    useEffect(() => {\n        fetchTodos()\n        return () => setTodos([])\n    }, [])\n\n    return (\n        <Container>\n            <NavBar />\n            <h1>Completed</h1>\n            {todos.length > 0\n                ? (\n                    todos.map(todo => {\n                        return <TodoCard key={todo.id} fetchTodos={fetchTodos} todo={todo} />\n                    })\n                )\n                : (\n                    <PlaceHolder type=\"completed\" />\n                )}\n        </Container>\n    )\n}\n\nexport default Completed","\nimport React, { useState, useEffect } from 'react'\nimport { Link, useParams, Redirect } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\n\nimport { bff } from '../config'\n\nconst EditTodoForm = () => {\n    const params = useParams()\n    const [redirect, setRedirect] = useState(false)\n    const [req, setReq] = useState({\n        name: '',\n        description: ''\n    })\n\n    const handleOnChange = (e) => {\n        setReq({\n            ...req,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleOnSubmit = (e) => {\n        e.preventDefault()\n        fetch(bff + '/todos/' + params.id, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: 'PUT',\n            body: JSON.stringify(req)\n        })\n            .then(res => res.json())\n            .then(res => {\n                setRedirect(true)\n            })\n            .catch(err => console.log(err))\n    }\n\n    useEffect(() => {\n        fetch(bff + '/todos/' + params.id)\n            .then(res => res.json())\n            .then(res => {\n                setReq({\n                    name: res.data.name,\n                    description: res.data.description\n                })\n            })\n            .catch(err => console.log(err))\n        return () => {\n            setRedirect(false)\n            setReq({\n                name: '',\n                description: ''\n            })\n        }\n    }, [params])\n\n    if (redirect) {\n        return <Redirect to=\"/\" />\n    }\n\n    return (\n        <Form onSubmit={handleOnSubmit}>\n            <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                    name=\"name\"\n                    onChange={handleOnChange}\n                    required\n                    type=\"text\"\n                    value={req.name}\n                />\n            </Form.Group>\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Label>Enter Description</Form.Label>\n                <Form.Control\n                    as=\"textarea\"\n                    name=\"description\"\n                    onChange={handleOnChange}\n                    value={req.description}\n                    rows=\"3\"\n                />\n            </Form.Group>\n            <div>\n                <Button block={true} variant=\"primary\" type=\"submit\">Submit</Button>\n                <Button as={Link} block={true} variant=\"secondary\" to=\"/\">Cancel</Button>\n            </div>\n        </Form>\n    )\n}\n\nexport default EditTodoForm","\nimport React from 'react'\nimport { Container } from 'react-bootstrap'\n\nimport EditTodoForm from '../components/EditTodoForm'\nimport NavBar from '../components/NavBar'\n\nconst EditTodo = () => {\n    return (\n        <Container>\n            <NavBar />\n            <h1>Edit</h1>\n            <EditTodoForm />\n        </Container>\n    )\n}\n\nexport default EditTodo","\nimport React, { useState, useEffect } from 'react'\nimport { Link, Redirect } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\n\nimport { bff } from '../config'\n\nconst NewTodoForm = () => {\n    const [redirect, setRedirect] = useState(false)\n    const [req, setReq] = useState({\n        name: '',\n        description: '',\n        completed: false\n    })\n\n    const handleOnChange = (e) => {\n        setReq({\n            ...req,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    const handleOnSubmit = (e) => {\n        e.preventDefault()\n        fetch(bff + '/todos', {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify(req)\n        })\n            .then(res => res.json())\n            .then(res => {\n                setRedirect(true)\n            })\n            .catch(err => console.log(err))\n    }\n\n    useEffect(() => {\n        return () => {\n            setRedirect(false)\n            setReq({\n                name: '',\n                description: '',\n                completed: false\n            })\n        }\n    }, [])\n\n    if (redirect) {\n        return <Redirect to=\"/\" />\n    }\n\n    return (\n        <Form onSubmit={handleOnSubmit}>\n            <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                    name=\"name\"\n                    placeholder=\"Enter name...\"\n                    onChange={handleOnChange}\n                    required\n                    type=\"text\"\n                    value={req.name}\n                />\n            </Form.Group>\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                <Form.Label>Enter Description</Form.Label>\n                <Form.Control\n                    as=\"textarea\"\n                    name=\"description\"\n                    onChange={handleOnChange}\n                    value={req.description}\n                    rows=\"3\"\n                    placeholder=\"Enter description...\"\n                />\n            </Form.Group>\n            <div>\n                <Button block={true} variant=\"primary\" type=\"submit\">Submit</Button>\n                <Button as={Link} block={true} variant=\"secondary\" to=\"/\">Cancel</Button>\n            </div>\n        </Form>\n    )\n}\n\nexport default NewTodoForm","\nimport React from 'react'\nimport { Container } from 'react-bootstrap'\n\nimport NavBar from '../components/NavBar'\nimport NewTodoForm from '../components/NewTodoForm'\n\nconst NewTodo = () => {\n    return (\n        <Container>\n            <NavBar />\n            <h1>New Todo</h1>\n            <NewTodoForm />\n        </Container>\n    )\n}\n\nexport default NewTodo","\nimport React, { useState, useEffect } from 'react'\nimport { Container } from 'react-bootstrap'\n\nimport NavBar from '../components/NavBar'\nimport PlaceHolder from '../components/PlaceHolder'\nimport TodoCard from '../components/TodoCard'\n\nimport { bff } from '../config'\n\nconst Todos = () => {\n    const [todos, setTodos] = useState([])\n\n    const fetchTodos = () => {\n        fetch(bff + '/todos?completed=false', {\n            'Access-Control-Allow-Origin': '*'\n        })\n            .then(res => res.json())\n            .then(res => setTodos(res.data))\n            .catch(res => console.log(res))\n    }\n\n    useEffect(() => {\n        fetchTodos()\n        return () => setTodos([])\n    }, [])\n\n    return (\n        <Container>\n            <NavBar />\n            <h1>Todos</h1>\n            {todos.length > 0\n                ? (\n                    todos.map(todo => {\n                        return <TodoCard\n                            fetchTodos={fetchTodos}\n                            key={todo.id}\n                            todo={todo} />\n                    })\n                )\n                : (<PlaceHolder type=\"todos\" />)\n            }\n        </Container>\n    )\n}\n\nexport default Todos","\nimport React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nimport Completed from './pages/Completed'\nimport EditTodo from './pages/EditTodo'\nimport NewTodo from './pages/NewTodo'\nimport Todos from './pages/Todos'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Todos />\n          </Route>\n          <Route path=\"/completed\">\n            <Completed />\n          </Route>\n          <Route path=\"/new\">\n            <NewTodo />\n          </Route>\n          <Route exact path=\"/:id/edit\">\n            <EditTodo />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()"],"sourceRoot":""}